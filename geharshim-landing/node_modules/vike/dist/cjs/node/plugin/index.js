"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.version = exports.getVikeConfig = void 0;
exports.plugin = plugin;
exports.ssr = plugin;
exports.default = plugin;
var commonConfig_js_1 = require("./plugins/commonConfig.js");
Object.defineProperty(exports, "getVikeConfig", { enumerable: true, get: function () { return commonConfig_js_1.getVikeConfigPublic; } });
var utils_js_1 = require("./utils.js");
Object.defineProperty(exports, "version", { enumerable: true, get: function () { return utils_js_1.PROJECT_VERSION; } });
const utils_js_2 = require("./utils.js");
const build_js_1 = require("./plugins/build.js");
const previewConfig_js_1 = require("./plugins/previewConfig.js");
const index_js_1 = require("./plugins/devConfig/index.js");
const index_js_2 = require("./plugins/importUserCode/index.js");
const extractAssetsPlugin_js_1 = require("./plugins/extractAssetsPlugin.js");
const extractExportNamesPlugin_js_1 = require("./plugins/extractExportNamesPlugin.js");
const setGlobalContext_js_1 = require("./plugins/setGlobalContext.js");
const commonConfig_js_2 = require("./plugins/commonConfig.js");
const baseUrls_js_1 = require("./plugins/baseUrls.js");
const envVars_js_1 = require("./plugins/envVars.js");
const picocolors_1 = __importDefault(require("@brillout/picocolors"));
const fileEnv_js_1 = require("./plugins/fileEnv.js");
const getPageAssets_js_1 = require("../runtime/renderPage/getPageAssets.js");
const resolveClientEntriesDev_js_1 = require("./shared/resolveClientEntriesDev.js");
const workaroundCssModuleHmr_js_1 = require("./plugins/workaroundCssModuleHmr.js");
const workaroundVite6HmrRegression_js_1 = require("./plugins/workaroundVite6HmrRegression.js");
// We don't call this in ./onLoad.ts to avoid a cyclic dependency with utils.ts
(0, getPageAssets_js_1.setResolveClientEntriesDev)(resolveClientEntriesDev_js_1.resolveClientEntriesDev);
// Return `PluginInterop` instead of `Plugin` to avoid type mismatch upon different Vite versions
function plugin(vikeVitePluginOptions = {}) {
    const plugins = [
        ...(0, commonConfig_js_2.commonConfig)(vikeVitePluginOptions),
        (0, index_js_2.importUserCode)(),
        ...(0, index_js_1.devConfig)(),
        ...(0, build_js_1.build)(),
        (0, previewConfig_js_1.previewConfig)(),
        ...(0, extractAssetsPlugin_js_1.extractAssetsPlugin)(),
        (0, extractExportNamesPlugin_js_1.extractExportNamesPlugin)(),
        ...(0, setGlobalContext_js_1.setGlobalContext)(),
        (0, baseUrls_js_1.baseUrls)(),
        (0, envVars_js_1.envVarsPlugin)(),
        (0, fileEnv_js_1.fileEnv)(),
        (0, workaroundCssModuleHmr_js_1.workaroundCssModuleHmr)(),
        (0, workaroundVite6HmrRegression_js_1.workaroundVite6HmrRegression)()
    ];
    Object.assign(plugins, { __vikeVitePluginOptions: vikeVitePluginOptions });
    return plugins;
}
// Error upon wrong usage
Object.defineProperty(plugin, 'apply', {
    enumerable: true,
    get: () => {
        (0, utils_js_2.assertUsage)(false, `Add ${picocolors_1.default.cyan('vike()')} instead of ${picocolors_1.default.cyan('vike')} to vite.config.js#plugins (i.e. call the function and add the return value instead of adding the function itself)`, { showStackTrace: true });
    }
});
// CJS default export `const vike = require('vike/plugin')`
//  - It needs to live at the end of this file, in order to ensure we do it after all assignments to `exports`.
try {
    module.exports = Object.assign(exports.default, exports);
}
catch { }
