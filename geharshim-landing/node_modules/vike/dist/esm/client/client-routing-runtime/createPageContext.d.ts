export { createPageContextClientSide };
declare function createPageContextClientSide(urlOriginal: string): Promise<{
    globalContext: {
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } & {
        isClientSide: true;
    } & {
        _pageRoutes: import("../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    };
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    _pageRoutes: import("../../__internal/index.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isClientSide: boolean;
    isPrerendering: boolean;
    urlOriginal: string;
    _urlHandler: null;
    _urlRewrite: null;
    _baseServer: string;
} & {
    urlParsed: import("./utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & {
    config: import("../../types/index.js").ConfigResolved;
    _source: import("../../shared/page-configs/getPageConfigUserFriendly.js").Source;
    _sources: import("../../shared/page-configs/getPageConfigUserFriendly.js").Sources;
    _from: import("../../shared/page-configs/getPageConfigUserFriendly.js").From;
    isPageContext: true;
}>;
