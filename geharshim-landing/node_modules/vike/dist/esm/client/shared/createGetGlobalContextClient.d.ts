export { getGlobalContext };
export { getGlobalContextSync };
export { createGetGlobalContextClient };
import { type GlobalContextShared } from '../../shared/createGlobalContextShared.js';
declare function createGetGlobalContextClient<GlobalContextAddendum extends object>(virtualFileExports: unknown, isClientRouting: boolean, addGlobalContext?: (globalContext: GlobalContextShared) => Promise<GlobalContextAddendum>): () => Promise<{
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} & Awaited<{
    /**
     * Whether the environment is client-side or server-side / pre-rendering.
     *
     * We recommend using `import.meta.env.SSR` instead, see https://vike.dev/globalContext
     */
    isClientSide: true;
} & Awaited<GlobalContextAddendum>>>;
declare function getGlobalContext(): Promise<never>;
declare function getGlobalContextSync(): never;
