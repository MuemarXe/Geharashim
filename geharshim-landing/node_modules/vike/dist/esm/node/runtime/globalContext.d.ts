export { getGlobalContext };
export { getGlobalContextSync };
export { getGlobalContextAsync };
export { getGlobalContextServerInternal };
export { getViteDevServer };
export { getViteConfig };
export { initGlobalContext_renderPage };
export { initGlobalContext_runPrerender };
export { initGlobalContext_getPagesAndRoutes };
export { setGlobalContext_viteDevServer };
export { setGlobalContext_viteConfig };
export { setGlobalContext_isPrerendering };
export { setGlobalContext_isProduction };
export { setGlobalContext_buildEntry };
export { clearGlobalContext };
export { assertBuildInfo };
export { updateUserFiles };
export type { BuildInfo };
export type { GlobalContextServerInternal as GlobalContextServerInternal };
export type { GlobalContextServer };
import type { ViteManifest } from '../shared/ViteManifest.js';
import type { ResolvedConfig, ViteDevServer } from 'vite';
import type { ViteConfigRuntime } from '../plugin/shared/getViteConfigRuntime.js';
import type { GlobalContext } from '../../shared/types.js';
type GlobalContextServer = ReturnType<typeof makePublic> & Vike.GlobalContext & Vike.GlobalContextServer;
type GlobalContextServerInternal = Awaited<ReturnType<typeof setGlobalContext>>;
declare function getGlobalContextServerInternal(): Promise<{
    globalContext: (Record<string, unknown> & {
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } & {
        _isProduction: false;
        _isPrerendering: false;
        assetsManifest: null;
        _viteDevServer: ViteDevServer;
        viteConfig: ResolvedConfig;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    }) | (Record<string, unknown> & {
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } & {
        _isPrerendering: true;
        viteConfig: ResolvedConfig;
        _isProduction: true;
        assetsManifest: ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    }) | (Record<string, unknown> & {
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } & {
        _isPrerendering: false;
        viteConfig: null;
        _isProduction: true;
        assetsManifest: ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    });
    globalContext_public: Record<string, unknown> & Pick<{
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } & ({
        _isProduction: false;
        _isPrerendering: false;
        assetsManifest: null;
        _viteDevServer: ViteDevServer;
        viteConfig: ResolvedConfig;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } | {
        _isPrerendering: true;
        viteConfig: ResolvedConfig;
        _isProduction: true;
        assetsManifest: ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } | {
        _isPrerendering: false;
        viteConfig: null;
        _isProduction: true;
        assetsManifest: ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
        _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../types/index.js").ConfigResolved;
        pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    }), "pages" | "viteConfig" | "viteConfigRuntime" | "assetsManifest" | "baseServer" | "baseAssets" | "config" | "isClientSide"> & Vike.GlobalContext & Vike.GlobalContextServer;
}>;
/**
 * Get runtime information about your app.
 *
 * https://vike.dev/getGlobalContext
 */
declare function getGlobalContext(): Promise<GlobalContext>;
/**
 * Get runtime information about your app.
 *
 * https://vike.dev/getGlobalContext
 */
declare function getGlobalContextAsync(isProduction: boolean): Promise<GlobalContext>;
/**
 * Get runtime information about your app.
 *
 * https://vike.dev/getGlobalContext
 *
 * @deprecated
 */
declare function getGlobalContextSync(): GlobalContext;
declare function makePublic(globalContext: GlobalContextServerInternal): Pick<{
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} & ({
    _isProduction: false;
    _isPrerendering: false;
    assetsManifest: null;
    _viteDevServer: ViteDevServer;
    viteConfig: ResolvedConfig;
    viteConfigRuntime: {
        root: string;
        build: {
            outDir: string;
        };
        _baseViteOriginal: string;
        vitePluginServerEntry: {
            inject: boolean | undefined;
        };
    };
    baseServer: string;
    baseAssets: string;
    isClientSide: false;
    _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} | {
    _isPrerendering: true;
    viteConfig: ResolvedConfig;
    _isProduction: true;
    assetsManifest: ViteManifest;
    _viteDevServer: null;
    viteConfigRuntime: {
        root: string;
        build: {
            outDir: string;
        };
        _baseViteOriginal: string;
        vitePluginServerEntry: {
            inject: boolean | undefined;
        };
    };
    _usesClientRouter: boolean;
    baseServer: string;
    baseAssets: string;
    isClientSide: false;
    _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} | {
    _isPrerendering: false;
    viteConfig: null;
    _isProduction: true;
    assetsManifest: ViteManifest;
    _viteDevServer: null;
    viteConfigRuntime: {
        root: string;
        build: {
            outDir: string;
        };
        _baseViteOriginal: string;
        vitePluginServerEntry: {
            inject: boolean | undefined;
        };
    };
    _usesClientRouter: boolean;
    baseServer: string;
    baseAssets: string;
    isClientSide: false;
    _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
}), "pages" | "viteConfig" | "viteConfigRuntime" | "assetsManifest" | "baseServer" | "baseAssets" | "config" | "isClientSide">;
declare function setGlobalContext_viteDevServer(viteDevServer: ViteDevServer): Promise<void>;
declare function setGlobalContext_viteConfig(viteConfig: ResolvedConfig, viteConfigRuntime: ViteConfigRuntime): void;
declare function setGlobalContext_isPrerendering(): void;
declare function setGlobalContext_isProduction(isProduction: boolean, tolerateContraditction?: true): void;
declare function getViteDevServer(): ViteDevServer | null;
declare function getViteConfig(): ResolvedConfig | null;
declare function initGlobalContext_renderPage(): Promise<void>;
declare function initGlobalContext_runPrerender(): Promise<void>;
declare function initGlobalContext_getPagesAndRoutes(): Promise<void>;
declare function setGlobalContext_buildEntry(buildEntry: unknown): Promise<void>;
type BuildInfo = {
    versionAtBuildTime: string;
    usesClientRouter: boolean;
    viteConfigRuntime: ViteConfigRuntime;
};
declare function assertBuildInfo(buildInfo: unknown): asserts buildInfo is BuildInfo;
declare function updateUserFiles(): Promise<void>;
declare function setGlobalContext(virtualFileExports: unknown): Promise<{
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} & ({
    _isProduction: false;
    _isPrerendering: false;
    assetsManifest: null;
    _viteDevServer: ViteDevServer;
    viteConfig: ResolvedConfig;
    viteConfigRuntime: {
        root: string;
        build: {
            outDir: string;
        };
        _baseViteOriginal: string;
        vitePluginServerEntry: {
            inject: boolean | undefined;
        };
    };
    baseServer: string;
    baseAssets: string;
    isClientSide: false;
    _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} | {
    _isPrerendering: true;
    viteConfig: ResolvedConfig;
    _isProduction: true;
    assetsManifest: ViteManifest;
    _viteDevServer: null;
    viteConfigRuntime: {
        root: string;
        build: {
            outDir: string;
        };
        _baseViteOriginal: string;
        vitePluginServerEntry: {
            inject: boolean | undefined;
        };
    };
    _usesClientRouter: boolean;
    baseServer: string;
    baseAssets: string;
    isClientSide: false;
    _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} | {
    _isPrerendering: false;
    viteConfig: null;
    _isProduction: true;
    assetsManifest: ViteManifest;
    _viteDevServer: null;
    viteConfigRuntime: {
        root: string;
        build: {
            outDir: string;
        };
        _baseViteOriginal: string;
        vitePluginServerEntry: {
            inject: boolean | undefined;
        };
    };
    _usesClientRouter: boolean;
    baseServer: string;
    baseAssets: string;
    isClientSide: false;
    _pageRoutes: import("../../shared/route/loadPageRoutes.js").PageRoutes;
    _onBeforeRouteHook: import("../../shared/hooks/getHook.js").Hook | null;
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("../../types/index.js").ConfigResolved;
    pages: import("../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
})>;
declare function clearGlobalContext(): void;
