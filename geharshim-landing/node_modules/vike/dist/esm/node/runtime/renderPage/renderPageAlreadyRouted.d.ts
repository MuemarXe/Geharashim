export { renderPageAlreadyRouted };
export { prerenderPage };
export type { PageContextAfterRender };
import { type PageContextUrlInternal } from '../../../shared/getPageContextUrlComputed.js';
import { HttpResponse } from './createHttpResponse.js';
import { PageContext_loadUserFilesServerSide, type PageFiles } from './loadUserFilesServerSide.js';
import type { PageContextCreatedServerSide } from './createPageContextServerSide.js';
type PageContextAfterRender = {
    httpResponse: HttpResponse;
    errorWhileRendering: null | Error;
};
declare function renderPageAlreadyRouted<PageContext extends {
    pageId: string;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: null | boolean;
    routeParams: Record<string, string>;
    errorWhileRendering: null | Error;
    _httpRequestId: number;
} & PageContextCreatedServerSide & PageContextUrlInternal & PageContext_loadUserFilesServerSide>(pageContext: PageContext): Promise<PageContext & PageContextAfterRender>;
declare function prerenderPage(pageContext: PageContextCreatedServerSide & PageFiles & {
    routeParams: Record<string, string>;
    pageId: string;
    _urlRewrite: null;
    _httpRequestId: number | null;
    _usesClientRouter: boolean;
    _pageContextAlreadyProvidedByOnPrerenderHook?: true;
    is404: boolean;
}): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
    pageContext: {
        isClientSide: boolean;
        isPrerendering: boolean;
    } & Pick<import("../../../shared/types.js").PageContextBuiltInServerInternal, "urlOriginal" | "headersOriginal"> & {
        url?: string;
        headers?: Record<string, string>;
    } & {
        globalContext: import("../globalContext.js").GlobalContextServer;
        _globalContext: {
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        } & ({
            _isProduction: false;
            _isPrerendering: false;
            assetsManifest: null;
            _viteDevServer: import("vite").ViteDevServer;
            viteConfig: import("vite").ResolvedConfig;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
            baseServer: string;
            baseAssets: string;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        } | {
            _isPrerendering: true;
            viteConfig: import("vite").ResolvedConfig;
            _isProduction: true;
            assetsManifest: import("../../shared/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
            _usesClientRouter: boolean;
            baseServer: string;
            baseAssets: string;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        } | {
            _isPrerendering: false;
            viteConfig: null;
            _isProduction: true;
            assetsManifest: import("../../shared/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
            _usesClientRouter: boolean;
            baseServer: string;
            baseAssets: string;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        });
        _baseServer: string;
        _baseAssets: string;
        _includeAssetsImportedByServer: boolean;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        _pageContextInit: import("../renderPage.js").PageContextInit;
        _urlRewrite: null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & {
        config: import("../../../types/index.js").ConfigResolved;
        _source: import("../../../shared/page-configs/getPageConfigUserFriendly.js").Source;
        _sources: import("../../../shared/page-configs/getPageConfigUserFriendly.js").Sources;
        _from: import("../../../shared/page-configs/getPageConfigUserFriendly.js").From;
        isPageContext: true;
    } & import("../../../shared/getPageFiles.js").PageConfigUserFriendlyOld & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: boolean;
    } & {
        isClientSideNavigation: boolean;
        _urlHandler: null;
    };
} | {
    documentHtml: string;
    pageContextSerialized: string;
    pageContext: {
        isClientSide: boolean;
        isPrerendering: boolean;
    } & Pick<import("../../../shared/types.js").PageContextBuiltInServerInternal, "urlOriginal" | "headersOriginal"> & {
        url?: string;
        headers?: Record<string, string>;
    } & {
        globalContext: import("../globalContext.js").GlobalContextServer;
        _globalContext: {
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        } & ({
            _isProduction: false;
            _isPrerendering: false;
            assetsManifest: null;
            _viteDevServer: import("vite").ViteDevServer;
            viteConfig: import("vite").ResolvedConfig;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
            baseServer: string;
            baseAssets: string;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        } | {
            _isPrerendering: true;
            viteConfig: import("vite").ResolvedConfig;
            _isProduction: true;
            assetsManifest: import("../../shared/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
            _usesClientRouter: boolean;
            baseServer: string;
            baseAssets: string;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        } | {
            _isPrerendering: false;
            viteConfig: null;
            _isProduction: true;
            assetsManifest: import("../../shared/ViteManifest.js").ViteManifest;
            _viteDevServer: null;
            viteConfigRuntime: {
                root: string;
                build: {
                    outDir: string;
                };
                _baseViteOriginal: string;
                vitePluginServerEntry: {
                    inject: boolean | undefined;
                };
            };
            _usesClientRouter: boolean;
            baseServer: string;
            baseAssets: string;
            isClientSide: false;
            _pageRoutes: import("../../../__internal/index.js").PageRoutes;
            _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
            isGlobalContext: true;
            _virtualFileExports: unknown;
            _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
            _pageConfigs: import("../../../__internal/index.js").PageConfig[];
            _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
            _allPageIds: string[];
            config: import("../../../types/index.js").ConfigResolved;
            pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
        });
        _baseServer: string;
        _baseAssets: string;
        _includeAssetsImportedByServer: boolean;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        _pageContextInit: import("../renderPage.js").PageContextInit;
        _urlRewrite: null;
        _urlHandler: ((url: string) => string) | null;
        isClientSideNavigation: boolean;
    } & {
        urlParsed: import("../utils.js").UrlPublic;
        urlPathname: string;
        url: string;
    } & {
        headers: Record<string, string> | null;
    } & {
        config: import("../../../types/index.js").ConfigResolved;
        _source: import("../../../shared/page-configs/getPageConfigUserFriendly.js").Source;
        _sources: import("../../../shared/page-configs/getPageConfigUserFriendly.js").Sources;
        _from: import("../../../shared/page-configs/getPageConfigUserFriendly.js").From;
        isPageContext: true;
    } & import("../../../shared/getPageFiles.js").PageConfigUserFriendlyOld & {
        Page: unknown;
        _isHtmlOnly: boolean;
        _passToClient: string[];
        _pageFilePathsLoaded: string[];
    } & {
        __getPageAssets: () => Promise<import("./getPageAssets.js").PageAsset[]>;
    } & {
        routeParams: Record<string, string>;
        pageId: string;
        _urlRewrite: null;
        _httpRequestId: number | null;
        _usesClientRouter: boolean;
        _pageContextAlreadyProvidedByOnPrerenderHook?: true;
        is404: boolean;
    } & {
        isClientSideNavigation: boolean;
        _urlHandler: null;
    };
}>;
