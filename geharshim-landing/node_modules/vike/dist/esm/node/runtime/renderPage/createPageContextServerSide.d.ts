export { createPageContextServerSide };
export { createPageContextServerSideWithoutGlobalContext };
export type { PageContextCreatedServerSide };
import type { GlobalContextServerInternal, GlobalContextServer } from '../globalContext.js';
import type { PageContextInit } from '../renderPage.js';
type PageContextCreatedServerSide = Awaited<ReturnType<typeof createPageContextServerSide>>;
declare function createPageContextServerSide(pageContextInit: PageContextInit, globalContext: GlobalContextServerInternal, globalObject_public: GlobalContextServer, { isPrerendering, ssr: { urlHandler, isClientSideNavigation } }: {
    isPrerendering: false;
    ssr: {
        urlHandler: null | ((url: string) => string);
        isClientSideNavigation: boolean;
    };
} | {
    isPrerendering: true;
    ssr?: undefined;
}): Promise<{
    isClientSide: boolean;
    isPrerendering: boolean;
} & Pick<import("../../../shared/types.js").PageContextBuiltInServerInternal, "urlOriginal" | "headersOriginal"> & {
    url?: string;
    headers?: Record<string, string>;
} & {
    globalContext: GlobalContextServer;
    _globalContext: {
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../../types/index.js").ConfigResolved;
        pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } & ({
        _isProduction: false;
        _isPrerendering: false;
        assetsManifest: null;
        _viteDevServer: import("vite").ViteDevServer;
        viteConfig: import("vite").ResolvedConfig;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../../types/index.js").ConfigResolved;
        pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } | {
        _isPrerendering: true;
        viteConfig: import("vite").ResolvedConfig;
        _isProduction: true;
        assetsManifest: import("../../shared/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../../types/index.js").ConfigResolved;
        pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    } | {
        _isPrerendering: false;
        viteConfig: null;
        _isProduction: true;
        assetsManifest: import("../../shared/ViteManifest.js").ViteManifest;
        _viteDevServer: null;
        viteConfigRuntime: {
            root: string;
            build: {
                outDir: string;
            };
            _baseViteOriginal: string;
            vitePluginServerEntry: {
                inject: boolean | undefined;
            };
        };
        _usesClientRouter: boolean;
        baseServer: string;
        baseAssets: string;
        isClientSide: false;
        _pageRoutes: import("../../../__internal/index.js").PageRoutes;
        _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
        isGlobalContext: true;
        _virtualFileExports: unknown;
        _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
        _pageConfigs: import("../../../__internal/index.js").PageConfig[];
        _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
        _allPageIds: string[];
        config: import("../../../types/index.js").ConfigResolved;
        pages: import("../../../shared/page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
    });
    _baseServer: string;
    _baseAssets: string;
    _includeAssetsImportedByServer: boolean;
    _pageFilesAll: import("../../../shared/getPageFiles.js").PageFile[];
    _pageConfigs: import("../../../__internal/index.js").PageConfig[];
    _pageConfigGlobal: import("../../../shared/page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    _pageRoutes: import("../../../__internal/index.js").PageRoutes;
    _onBeforeRouteHook: import("../../../shared/hooks/getHook.js").Hook | null;
    _pageContextInit: PageContextInit;
    _urlRewrite: null;
    _urlHandler: ((url: string) => string) | null;
    isClientSideNavigation: boolean;
} & {
    urlParsed: import("../utils.js").UrlPublic;
    urlPathname: string;
    url: string;
} & {
    headers: Record<string, string> | null;
} & {
    config: import("../../../types/index.js").ConfigResolved;
    _source: import("../../../shared/page-configs/getPageConfigUserFriendly.js").Source;
    _sources: import("../../../shared/page-configs/getPageConfigUserFriendly.js").Sources;
    _from: import("../../../shared/page-configs/getPageConfigUserFriendly.js").From;
    isPageContext: true;
}>;
declare function createPageContextServerSideWithoutGlobalContext(pageContextInit: PageContextInit): {
    isClientSide: boolean;
    isPrerendering: boolean;
} & Pick<import("../../../shared/types.js").PageContextBuiltInServerInternal, "urlOriginal" | "headersOriginal"> & {
    url?: string;
    headers?: Record<string, string>;
};
