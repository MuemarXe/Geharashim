export { getVikeConfig };
export { getVikeConfigOptional };
export { getVikeConfig2 };
export { reloadVikeConfig };
export { isV1Design };
export { getConfVal };
export { getConfigDefinitionOptional };
export { getVikeConfigFromCliOrEnv };
export { isOverriden };
export type { VikeConfigObject };
import type { PageConfigGlobalBuildTime, ConfigValueSource, PageConfigBuildTime } from '../../../../../shared/page-configs/PageConfig.js';
import { type ConfigDefinitions, type ConfigDefinitionInternal } from './getVikeConfig/configDefinitionsBuiltIn.js';
import type { ResolvedConfig, UserConfig } from 'vite';
import { type PageConfigUserFriendly, type PageConfigsUserFriendly } from '../../../../../shared/page-configs/getPageConfigUserFriendly.js';
import { type PlusFile } from './getVikeConfig/getPlusFilesAll.js';
type VikeConfigObject = {
    pageConfigs: PageConfigBuildTime[];
    pageConfigGlobal: PageConfigGlobalBuildTime;
    global: PageConfigUserFriendly;
    pages: PageConfigsUserFriendly;
    vikeConfigDependencies: Set<string>;
};
declare function reloadVikeConfig(config: ResolvedConfig): void;
declare function getVikeConfig(config: ResolvedConfig, { doNotRestartViteOnError }?: {
    doNotRestartViteOnError?: true;
}): Promise<VikeConfigObject>;
declare function getVikeConfig2(userRootDir: string, isDev: boolean, vikeVitePluginOptions: unknown): Promise<VikeConfigObject>;
declare function getVikeConfigOptional(): Promise<null | VikeConfigObject>;
declare function isV1Design(config: ResolvedConfig | UserConfig): boolean;
declare function getVikeConfigFromCliOrEnv(): {
    vikeConfigFromCliOrEnv: {
        [x: string]: unknown;
    };
    configFromCliOptions: import("../../../../cli/parseCli.js").CliOptions | null;
    configFromEnvVar: Record<string, unknown> | null;
};
declare function getConfigDefinitionOptional(configDefinitions: ConfigDefinitions, configName: string): ConfigDefinitionInternal | null;
declare function getConfVal(plusFile: PlusFile, configName: string): null | {
    value: unknown;
    valueIsLoaded: true;
} | {
    valueIsLoaded: false;
};
declare function isOverriden(source: ConfigValueSource, configName: string, pageConfig: PageConfigBuildTime | PageConfigGlobalBuildTime): boolean;
