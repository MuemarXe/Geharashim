export { createGlobalContextShared };
export { getGlobalContextSyncErrMsg };
export type { GlobalContextShared };
export type { GlobalContextSharedPublic };
declare const getGlobalContextSyncErrMsg = "The global context isn't set yet, call getGlobalContextSync() later or use getGlobalContext() instead.";
declare function createGlobalContextShared<GlobalContextAddendum extends object>(virtualFileExports: unknown, globalObject: {
    globalContext?: Record<string, unknown>;
}, addGlobalContext?: (globalContext: GlobalContextShared) => Promise<GlobalContextAddendum>): Promise<{
    /**
     * Useful for distinguishing `globalContext` from other objects and narrowing down TypeScript unions.
     *
     * https://vike.dev/globalContext#typescript
     */
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("./getPageFiles.js").PageFile[];
    _pageConfigs: import("./page-configs/PageConfig.js").PageConfigRuntime[];
    _pageConfigGlobal: import("./page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("./page-configs/Config/PageContextConfig.js").ConfigResolved;
    pages: import("./page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
} & Awaited<GlobalContextAddendum>>;
type GlobalContextSharedPublic = Pick<GlobalContextShared, 'config' | 'pages' | 'isGlobalContext'>;
type GlobalContextShared = ReturnType<typeof createGlobalContextBase>;
declare function createGlobalContextBase(virtualFileExports: unknown): {
    /**
     * Useful for distinguishing `globalContext` from other objects and narrowing down TypeScript unions.
     *
     * https://vike.dev/globalContext#typescript
     */
    isGlobalContext: true;
    _virtualFileExports: unknown;
    _pageFilesAll: import("./getPageFiles.js").PageFile[];
    _pageConfigs: import("./page-configs/PageConfig.js").PageConfigRuntime[];
    _pageConfigGlobal: import("./page-configs/PageConfig.js").PageConfigGlobalRuntime;
    _allPageIds: string[];
    config: import("./page-configs/Config/PageContextConfig.js").ConfigResolved;
    pages: import("./page-configs/getPageConfigUserFriendly.js").PageConfigsUserFriendly;
};
